#!/usr/bin/env node

'use strict';

const cluster = require('cluster'),
      clusterConfig = require('../config/cluster'),
      os = require('os');

if (cluster.isMaster) {
  /**
   * Connect to redis server
   */
  require('../redis_client');

  const numWorkers = os.cpus().length,
        Scheduler = require('../lib/scheduler'),
        Models = require('../models'),
        PromiseSeries = require('promise-series');

  for (let i = 0; i < numWorkers; i++) {
    cluster.fork();
  }

  cluster.on('online', worker => {
    console.log('Worker ' + worker.process.pid + ' is online');
  });

  cluster.on('exit', (worker, code, signal) => {
    console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);
    console.log('Starting a new worker');
    cluster.fork();
  });

  let series = new PromiseSeries();

  const _setTimeout = (fn, interval) => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        fn();
        resolve(true);
      }, interval);
    });
  };

  // start the scheduler processor;
  if (clusterConfig.isMaster) {
    Scheduler.init();

    Models.Group.scope('entireTalks', 'activeTalks').findAll()
      .then(groups => {
        // Set 400 delay to execute g.listenToMembers
        // to avoid mass incoming payload
        groups.forEach(g => {
          series.add(() => {
            return _setTimeout(() => {
              g.listenToMembersInFirebase();
            }, 400)
          });
        });
        series.run();
      });
  }
} else {
  /**
   * Include Newrelic to monitor the perf
   */
  if (['staging', 'production'].indexOf(process.env.NODE_ENV) !== -1) {
    require('newrelic');
  }

  const app = require('../app'),
        http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '5000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    const debug = require('debug')('smartChat-service:server'),
          request_queue = require('../lib/request_queue');

    request_queue.run();

    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
